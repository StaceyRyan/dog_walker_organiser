{"version":3,"sources":["components/DogButtons.js","components/LoginForm.js","components/RegistrationForm.js","components/WalkiesHome.js","App.js","serviceWorker.js","index.js"],"names":["dogButtonStates","showLogout","showAllDogs","showNewDog","showUpdateDog","allButtons","DogButtons","handleShowAllDogsButton","a","async","console","log","fetch","credentials","fetchDogs","json","dogList","setState","showDogList","handleSpecificDogButton","_id","fetchOneDog","oneDog","state","buttonState","noButtons","bind","this","length","onClick","allDogList","map","doggo","key","name","React","Component","LoginForm","props","handleSubmitButton","myHeaders","Headers","append","raw","JSON","stringify","username","password","loginUser","method","headers","body","redirect","then","response","status","Promise","reject","result","goToDogButtons","catch","error","submitDisabled","handleKeyStrike","event","keystrike","target","value","to","className","type","onChange","disabled","RegistrationForm","preferredName","email","phoneNumber","newHuman","text","checked","buttonStates","WalkiesHome","message","handleButtonClick","clickInfo","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9e316d33.chunk.js","sourcesContent":["import React from 'react';\n// import Dog from './Dog';\nimport Bootstrap from 'react-bootstrap';\n\nconst dogButtonStates = {\n    showLogout: 1,\n    showAllDogs: 2,\n    showNewDog: 3,\n    showUpdateDog: 4,\n    allButtons: 5\n}\nclass DogButtons extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n            buttonState: dogButtonStates.noButtons,\n            showDogList: []\n        };\n        this.handleShowAllDogsButton = this.handleShowAllDogsButton.bind(this);\n        this.handleSpecificDogButton = this.handleSpecificDogButton.bind(this);\n\n    }\n\n    handleShowAllDogsButton = async () => {\n        console.log('handle show dogs button')\n        const fetchDogs = await fetch('/dog/show_all',\n            {credentials: \"same-origin\"})\n        const dogList = await fetchDogs.json()\n        console.log(dogList)\n        this.setState({\n            showDogList: dogList\n        })\n    }\n\n    handleSpecificDogButton = async () => {\n        console.log('specific dog button')\n        const fetchOneDog = await fetch(`http://localhost:4000/dog/showOne/:${this._id}`)\n        const oneDog = await fetchOneDog.json()\n        console.log(oneDog)\n        this.setState({\n            showDogList: oneDog\n        })\n    }\n\n    render() {\n        if (this.state.showDogList.length === 0) {\n            return (\n            <>\n                <button onClick={this.handleShowAllDogsButton}>\n                    Go To Your Dogs\n                </button>\n            </>\n           )}\n           const allDogList = this.state.showDogList.map(doggo => {\n            return <li key={doggo._id}>\n                    <button onClick={this.handleSpecificDogButton}>\n                        {doggo.name}\n                    </button>\n                </li>\n        })\n        return (\n            <>\n            <p>Your Dog List</p>\n            <ul>\n                { allDogList } \n            </ul>\n            </>\n        )\n    }\n}\n\nexport default DogButtons;","import React from 'react';\nimport DogButtons from './DogButtons';\n\nimport { Redirect } from 'react-router-dom';\n\n\nclass LoginForm extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            username: '',\n            password: '',\n            submitDisabled: true,\n            goToDogButtons: false\n        };\n        this.handleKeyStrike = this.handleKeyStrike.bind(this);\n        this.handleSubmitButton = this.handleSubmitButton.bind(this);\n    };\n    handleKeyStrike(event) {\n        const keystrike = event.target.name;\n        const value = event.target.value;\n        this.setState({ [keystrike]: value });\n        \n        if (this.state.username && this.state.password) {\n            this.setState({\n                submitDisabled: false\n            })\n        }\n        else {\n            this.setState({\n                submitDisabled: true\n            })\n        }\n}\n\nhandleSubmitButton = async () => {\n    console.log('handle login form button clicked');\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const raw = JSON.stringify({ \"username\": this.state.username, \"password\": this.state.password });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow',\n        credentials: \"same-origin\"\n    };\n\n    const loginUser = fetch(\"/auth/login\", requestOptions)\n        .then(response => {\n            if(+response.status === 200)\n            {\n                return response;\n            } \n            Promise.reject();\n        })\n        .then(response => response.json())\n        .then(result => {\n            console.log(result);\n            this.setState({\n                goToDogButtons: true\n            })\n        })\n        .catch(error => console.log('error', error));\n\n    console.log('API login ' + JSON.stringify(loginUser));\n};\n\nrender() {\n    return (\n        <>\n        {this.state.goToDogButtons && <Redirect to=\"/DogButtons\" />}\n            <div className={\"form-group\"}>\n                <label>\n                    Username:\n                        <input type=\"text\" name=\"username\"\n                        value={this.state.username}\n                        className={\"form-control\"}\n                        onChange={this.handleKeyStrike} />\n                </label>\n            </div>\n            <label>\n                Password:\n                    <input type=\"password\" name=\"password\"\n                    value={this.state.password}\n                    className={\"form-control\"}\n                    onChange={this.handleKeyStrike} />\n            </label>\n            <button onClick={this.handleSubmitButton} \n                    disabled={this.state.submitDisabled} \n                    >Submit</button>\n            {/* todo make this a route redirect */}\n            {/* {<DogButtons />} */}\n            \n            \n        </>\n    )\n}\n};\n\nexport default LoginForm;","import React from 'react';\nimport DogButtons from './DogButtons';\n\nclass RegistrationForm extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            username: '',\n            password: '',\n            preferredName: '',\n            email: '',\n            phoneNumber: '',\n            submitDisabled: true\n        };\n        this.handleKeyStrike = this.handleKeyStrike.bind(this);\n        this.handleSubmitButton = this.handleSubmitButton.bind(this);\n    }\n\n    handleKeyStrike(event) {\n        const keystrike = event.target.name;\n        const value = event.target.value;\n        this.setState({ [keystrike]: value });\n\n        if (this.state.username &&\n            this.state.password &&\n            this.state.preferredName &&\n            this.state.email &&\n            this.state.phoneNumber) {\n            this.setState({\n                submitDisabled: false\n            })\n        }\n        else {\n            this.setState({\n                submitDisabled: true\n            })\n        }\n    }\n\n    handleSubmitButton = async () => {\n        console.log('handle registration form submit button')\n\n        let myHeaders = new Headers();\n        myHeaders.append(\"Content-Type\", \"application/json\");\n\n        let raw = JSON.stringify({\n            \"username\": this.state.username,\n            \"password\": this.state.password,\n            \"preferredName\": this.state.preferredName,\n            \"email\": this.state.email,\n            \"phoneNumber\": this.state.phoneNumber\n        });\n\n        let requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n        const newHuman = fetch(\"http://localhost:4000/user/newHuman\", requestOptions)\n            .then(response => response.text())\n            .then(result => console.log(result))\n            .catch(error => console.log('error', error));\n\n        console.log('New user created ' + JSON.stringify(newHuman));\n    };\n\n    render() {\n        return (\n            <>\n                <div className={\"form-group\"}>\n                    <label>\n                        Username:\n                        <input type=\"text\" name=\"username\"\n                            value={this.state.username}\n                            className={\"form-control\"}\n                            onChange={this.handleKeyStrike} />\n                    </label>\n                </div>\n                <div className={\"form-group\"}>\n                    <label>\n                        Preferred Name:\n                        <input type=\"text\" name=\"preferredName\"\n                            value={this.state.preferredName}\n                            className={\"form-control\"}\n                            onChange={this.handleKeyStrike} />\n                    </label>\n                </div>\n                <label>\n                    Password:\n                        <input type=\"text\" name=\"password\"\n                        value={this.state.password}\n                        className={\"form-control\"}\n                        onChange={this.handleKeyStrike} />\n                </label>\n                <div className={\"form-group\"}>\n                    <label>\n                        Email:\n                        <input type=\"text\" name=\"email\"\n                            value={this.state.email}\n                            className={\"form-control\"}\n                            onChange={this.handleKeyStrike} />\n                    </label>\n                    <div className={\"form-group\"}>\n                        <label>\n                            Phone Number:\n                        <input type=\"number\" name=\"phoneNumber\"\n                                value={this.state.phoneNumber}\n                                className={\"form-control\"}\n                                onChange={this.handleKeyStrike} />\n                        </label>\n                    </div>\n                    <p>Please indicate if you are a dog owner or a dog walker.</p>\n                    <div className={\"form-group\"}>\n                        <label>Dog Parent:\n                            <input type=\"radio\"\n                            checked={true} \n                            name=\"userRole\"\n                            value=\"owner\"\n                            onChange={this.handleKeyStrike} />\n                        </label>\n                    </div>\n                    <div className={\"form-group\"}>\n                        <label>Dog Walker:\n                            <input type=\"radio\"\n                            name=\"userRole\"\n                            value=\"walker\"\n                            onChange={this.handleKeyStrike} />\n                        </label>\n                    </div>\n                </div>\n                <button onClick={this.handleSubmitButton} disabled={this.state.submitDisabled}>Submit</button>\n\n            </>\n        )\n    }\n}\n\nexport default RegistrationForm;","import React from 'react';\nimport LoginForm from './LoginForm';\nimport RegistrationForm from './RegistrationForm';\n\nconst buttonStates = {\n    showLogin: 1,\n    showRegister: 2,\n    // showOtherButton: 3,\n    showBasicButtons: 4\n}\n\nclass WalkiesHome extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            message: '',\n            buttonState: buttonStates.showBasicButtons\n        };\n\n        //todo put bind stuff here\n        this.handleButtonClick = this.handleButtonClick.bind(this);\n    }\n\n    handleButtonClick(clickInfo){\n\n        if(clickInfo === \"login\")\n        {\n            console.log(\"login\");\n            this.setState({\n                buttonState: buttonStates.showLogin\n            })\n        }else{\n            this.setState({\n                buttonState: buttonStates.showRegister\n            })\n        }\n\n    }\n\n    render() {\n        return (\n            <>\n                {this.state.buttonState === buttonStates.showBasicButtons && \n                            <>\n                            <button onClick={() => this.handleButtonClick(\"login\")}>Login</button>\n                            <button onClick={() => this.handleButtonClick()}>Register</button>\n                            </>}\n                {this.state.buttonState === buttonStates.showLogin && <LoginForm/>}\n                {this.state.buttonState === buttonStates.showRegister && <RegistrationForm/>}\n            </>\n        )\n    }\n}\n\nexport default WalkiesHome;","import React from 'react';\nimport './App.css';\nimport WalkiesHome from './components/WalkiesHome';\nimport {\n  Route,\n  Switch\n} from 'react-router-dom';\nimport DogButtons from './components/DogButtons';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Walkies</h1>\n      <Switch>\n        <Route exact path=\"/\" component={WalkiesHome}/>\n        <Route exact path=\"/DogButtons\" component={DogButtons}/>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}